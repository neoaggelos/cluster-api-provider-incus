package loadbalancer

import (
	"bytes"
	"fmt"
	"text/template"
)

// DefaultKubeVIPTemplate is the KubeVIP config template.
const DefaultKubeVIPTemplate = `# generated by capn
apiVersion: v1
kind: Pod
metadata:
  name: kube-vip
  namespace: kube-system
spec:
  containers:
  - args:
    - manager
    env:
    - name: vip_arp
      value: "true"
    - name: port
      value: "6443"
    - name: vip_interface
      value: "{{ .Interface }}"
    - name: vip_cidr
      value: "32"
    - name: cp_enable
      value: "true"
    - name: cp_namespace
      value: kube-system
    - name: vip_ddns
      value: "false"
    - name: svc_enable
      value: "true"
    - name: svc_leasename
      value: plndr-svcs-lock
    - name: svc_election
      value: "true"
    - name: vip_leaderelection
      value: "true"
    - name: vip_leasename
      value: plndr-cp-lock
    - name: vip_leaseduration
      value: "15"
    - name: vip_renewdeadline
      value: "10"
    - name: vip_retryperiod
      value: "2"
    - name: address
      value: "{{ .Address }}"
    - name: prometheus_server
      value: :2112
    image: "{{ .Image }}"
    imagePullPolicy: IfNotPresent
    name: kube-vip
    resources: {}
    securityContext:
      capabilities:
        add:
        - NET_ADMIN
        - NET_RAW
    volumeMounts:
    - mountPath: /etc/kubernetes/admin.conf
      name: kubeconfig
  hostNetwork: true
  hostAliases:
  - ip: 127.0.0.1
    hostnames: [kubernetes]
  volumes:
  - hostPath:
      path: {{ .KubeconfigPath }}
    name: kubeconfig
status: {}
`

type kubeVIPTemplateInput struct {
	Interface      string
	Address        string
	Image          string
	KubeconfigPath string
}

func renderKubeVIPConfiguration(input kubeVIPTemplateInput) ([]byte, error) {
	t, err := template.New("kube-vip-config").Parse(DefaultKubeVIPTemplate)
	if err != nil {
		return nil, fmt.Errorf("failed to parse config template: %w", err)
	}

	// execute the template
	var buff bytes.Buffer
	err = t.Execute(&buff, input)
	if err != nil {
		return nil, fmt.Errorf("error executing config template: %w", err)
	}
	return buff.Bytes(), nil
}
