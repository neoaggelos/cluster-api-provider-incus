package loadbalancer

import (
	"bytes"
	"fmt"
	"net/netip"
	"text/template"
)

// DefaultKeepalivedTemplate is the keepalived config template.
const DefaultKeepalivedTemplate = `# generated by capn
vrrp_instance capn0 {
	state BACKUP
	nopreempt
	interface {{ .Interface }}
	virtual_router_id {{ .VirtualRouterID }}
	priority 100
	advert_int 1
	virtual_ipaddress {
		{{ .Address }}
	}
	authentication {
		auth_type PASS
		auth_pass {{ .Password }}
	}
}
`

type keepalivedTemplateInput struct {
	Interface       string
	Address         string
	Password        string
	VirtualRouterID uint8
}

func renderKeepalivedConfiguration(input keepalivedTemplateInput) ([]byte, error) {
	t, err := template.New("keepalived-config").Parse(DefaultKeepalivedTemplate)
	if err != nil {
		return nil, fmt.Errorf("failed to parse config template: %w", err)
	}

	addr, err := netip.ParseAddr(input.Address)
	if err != nil {
		return nil, fmt.Errorf("failed to parse VIP address %q: %w", input.Address, err)
	}

	if addr.Is4() {
		input.Address += "/32"
	} else {
		input.Address += "/128"
	}

	if len(input.Interface) == 0 {
		// NOTE(neoaggelos): pango template that renders to "eth0" for containers, "enp5s0" for virtual machines
		input.Interface = `{% if instance.type == "virtual-machine" %}enp5s0{% else %}eth0{% endif %}`
	}
	if len(input.Password) == 0 {
		input.Password = "01234567"
	}
	if input.VirtualRouterID == 0 {
		// if virtual router ID is not set, use last byte of IP address
		addrBytes := addr.AsSlice()
		input.VirtualRouterID = addrBytes[len(addrBytes)-1]
	}

	// execute the template
	var buff bytes.Buffer
	err = t.Execute(&buff, input)
	if err != nil {
		return nil, fmt.Errorf("error executing config template: %w", err)
	}
	return buff.Bytes(), nil
}
