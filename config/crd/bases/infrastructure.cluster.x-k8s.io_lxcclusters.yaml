---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.16.4
  name: lxcclusters.infrastructure.cluster.x-k8s.io
spec:
  group: infrastructure.cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: LXCCluster
    listKind: LXCClusterList
    plural: lxcclusters
    singular: lxccluster
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: Cluster
      jsonPath: .metadata.labels.cluster\.x-k8s\.io/cluster-name
      name: Cluster
      type: string
    - description: Load Balancer address
      jsonPath: .spec.controlPlaneEndpoint.host
      name: Load Balancer
      type: string
    - description: Cluster infrastructure is ready
      jsonPath: .status.ready
      name: Ready
      type: string
    - description: Time duration since creation of LXCCluster
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha2
    schema:
      openAPIV3Schema:
        description: LXCCluster is the Schema for the lxcclusters API.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: LXCClusterSpec defines the desired state of LXCCluster.
            properties:
              controlPlaneEndpoint:
                description: ControlPlaneEndpoint represents the endpoint to communicate
                  with the control plane.
                properties:
                  host:
                    description: host is the hostname on which the API server is serving.
                    maxLength: 512
                    type: string
                  port:
                    description: port is the port on which the API server is serving.
                    format: int32
                    type: integer
                required:
                - host
                - port
                type: object
              loadBalancer:
                description: LoadBalancer is configuration for provisioning the load
                  balancer of the cluster.
                maxProperties: 1
                minProperties: 1
                properties:
                  external:
                    description: |-
                      External will not create a load balancer. It must be used alongside something like kube-vip, otherwise the cluster will fail to provision.

                      When using the "external" mode, the load balancer address must be set in `.spec.controlPlaneEndpoint.host` on the LXCCluster object.
                    type: object
                  kubeVIP:
                    description: |-
                      KubeVIP will configure kube-vip on the control plane instances.

                      When using kube-vip, the controller will automatically inject /etc/kubernetes/manifests/kube-vip.yaml into all control plane nodes of the cluster.

                      When using the "kube-vip" mode, the load balancer address must be set in `.spec.controlPlaneEndpoint.host` on the LXCCluster object.
                    properties:
                      image:
                        description: Image is the kube-vip image to use. If not set,
                          this is ghcr.io/kube-vip/kube-vip:v0.6.4
                        type: string
                      interface:
                        description: Interface is the name of the interface where
                          the VIP will be configured. If not set, the default interface
                          is used.
                        type: string
                      kubeconfigPath:
                        description: |-
                          KubeconfigPath is the kubeconfig host path to use for kube-vip. If not set, this is /etc/kubernetes/admin.conf

                          KubeconfigPath is useful when not using the kubeadm bootstrap provider.
                        type: string
                      manifestPath:
                        description: |-
                          ManifestPath is the path on the host where the kube-vip static pod manifest will be created.

                          ManifestPath is useful when not using the kubeadm bootstrap provider.
                        type: string
                    type: object
                  lxc:
                    description: |-
                      LXC will spin up a plain Ubuntu instance with haproxy installed.

                      The controller will automatically update the list of backends on the haproxy configuration as control plane nodes are added or removed from the cluster.

                      No other configuration is required for "lxc" mode. The load balancer instance can be configured through the .instanceSpec field.

                      The load balancer container is a single point of failure to access the workload cluster control plane. Therefore, it should only be used for development or evaluation clusters.
                    properties:
                      instanceSpec:
                        description: InstanceSpec can be used to adjust the load balancer
                          instance configuration.
                        properties:
                          flavor:
                            description: |-
                              Flavor is configuration for the instance size (e.g. t3.micro, or c2-m4).

                              Examples:

                                - `t3.micro` -- match specs of an EC2 t3.micro instance
                                - `c2-m4` -- 2 cores, 4 GB RAM
                            type: string
                          image:
                            description: |-
                              Image to use for provisioning the load balancer machine. If not set,
                              a default image based on the load balancer type will be used.

                                - "oci": ghcr.io/lxc/cluster-api-provider-incus/haproxy:v20230606-42a2262b
                                - "lxc": haproxy from the default simplestreams server
                            properties:
                              fingerprint:
                                description: Fingerprint is the image fingerprint.
                                type: string
                              name:
                                description: |-
                                  Name is the image name or alias.

                                  Note that Incus and Canonical LXD use incompatible image servers. To help
                                  mitigate this issue, the following image names are recognized:

                                  For Incus:

                                    - `ubuntu:VERSION` => `ubuntu/VERSION/cloud` from https://images.linuxcontainers.org
                                    - `debian:VERSION` => `debian/VERSION/cloud` from https://images.linuxcontainers.org
                                    - `images:IMAGE` => `IMAGE` from https://images.linuxcontainers.org
                                    - `capi:IMAGE` => `IMAGE` from https://d14dnvi2l3tc5t.cloudfront.net
                                    - `capi-stg:IMAGE` => `IMAGE` from https://djapqxqu5n2qu.cloudfront.net

                                  For LXD:

                                    - `ubuntu:VERSION` => `VERSION` from https://cloud-images.ubuntu.com/releases
                                    - `debian:VERSION` => `debian/VERSION/cloud` from https://images.lxd.canonical.com
                                    - `images:IMAGE` => `IMAGE` from https://images.lxd.canonical.com
                                    - `capi:IMAGE` => `IMAGE` from https://d14dnvi2l3tc5t.cloudfront.net
                                    - `capi-stg:IMAGE` => `IMAGE` from https://djapqxqu5n2qu.cloudfront.net

                                  Any instances of `VERSION` in the image name will be replaced with the machine version.
                                  For example, to use debian based kubeadm images, you can set image name to "capi:kubeadm/VERSION/debian"
                                type: string
                              protocol:
                                description: Protocol is the protocol to use for fetching
                                  the image, e.g. "simplestreams".
                                type: string
                              server:
                                description: Server is the remote server, e.g. "https://images.linuxcontainers.org"
                                type: string
                            type: object
                          profiles:
                            description: Profiles is a list of profiles to attach
                              to the instance.
                            items:
                              type: string
                            type: array
                          target:
                            description: |-
                              Target where the load balancer machine should be provisioned, when
                              infrastructure is a production cluster.

                              Can be one of:

                                - `name`: where `name` is the name of a cluster member.
                                - `@name`: where `name` is the name of a cluster group.

                              Target is ignored when infrastructure is single-node (e.g. for
                              development purposes).

                              For more information on cluster groups, you can refer to https://linuxcontainers.org/incus/docs/main/explanation/clustering/#cluster-groups
                            type: string
                        type: object
                    type: object
                  oci:
                    description: |-
                      OCI will spin up an OCI instance running the kindest/haproxy image.

                      The controller will automatically update the list of backends on the haproxy configuration as control plane nodes are added or removed from the cluster.

                      No other configuration is required for "oci" mode. The load balancer instance can be configured through the .instanceSpec field.

                      The load balancer container is a single point of failure to access the workload cluster control plane. Therefore, it should only be used for development or evaluation clusters.

                      Requires server extensions: `instance_oci`
                    properties:
                      instanceSpec:
                        description: InstanceSpec can be used to adjust the load balancer
                          instance configuration.
                        properties:
                          flavor:
                            description: |-
                              Flavor is configuration for the instance size (e.g. t3.micro, or c2-m4).

                              Examples:

                                - `t3.micro` -- match specs of an EC2 t3.micro instance
                                - `c2-m4` -- 2 cores, 4 GB RAM
                            type: string
                          image:
                            description: |-
                              Image to use for provisioning the load balancer machine. If not set,
                              a default image based on the load balancer type will be used.

                                - "oci": ghcr.io/lxc/cluster-api-provider-incus/haproxy:v20230606-42a2262b
                                - "lxc": haproxy from the default simplestreams server
                            properties:
                              fingerprint:
                                description: Fingerprint is the image fingerprint.
                                type: string
                              name:
                                description: |-
                                  Name is the image name or alias.

                                  Note that Incus and Canonical LXD use incompatible image servers. To help
                                  mitigate this issue, the following image names are recognized:

                                  For Incus:

                                    - `ubuntu:VERSION` => `ubuntu/VERSION/cloud` from https://images.linuxcontainers.org
                                    - `debian:VERSION` => `debian/VERSION/cloud` from https://images.linuxcontainers.org
                                    - `images:IMAGE` => `IMAGE` from https://images.linuxcontainers.org
                                    - `capi:IMAGE` => `IMAGE` from https://d14dnvi2l3tc5t.cloudfront.net
                                    - `capi-stg:IMAGE` => `IMAGE` from https://djapqxqu5n2qu.cloudfront.net

                                  For LXD:

                                    - `ubuntu:VERSION` => `VERSION` from https://cloud-images.ubuntu.com/releases
                                    - `debian:VERSION` => `debian/VERSION/cloud` from https://images.lxd.canonical.com
                                    - `images:IMAGE` => `IMAGE` from https://images.lxd.canonical.com
                                    - `capi:IMAGE` => `IMAGE` from https://d14dnvi2l3tc5t.cloudfront.net
                                    - `capi-stg:IMAGE` => `IMAGE` from https://djapqxqu5n2qu.cloudfront.net

                                  Any instances of `VERSION` in the image name will be replaced with the machine version.
                                  For example, to use debian based kubeadm images, you can set image name to "capi:kubeadm/VERSION/debian"
                                type: string
                              protocol:
                                description: Protocol is the protocol to use for fetching
                                  the image, e.g. "simplestreams".
                                type: string
                              server:
                                description: Server is the remote server, e.g. "https://images.linuxcontainers.org"
                                type: string
                            type: object
                          profiles:
                            description: Profiles is a list of profiles to attach
                              to the instance.
                            items:
                              type: string
                            type: array
                          target:
                            description: |-
                              Target where the load balancer machine should be provisioned, when
                              infrastructure is a production cluster.

                              Can be one of:

                                - `name`: where `name` is the name of a cluster member.
                                - `@name`: where `name` is the name of a cluster group.

                              Target is ignored when infrastructure is single-node (e.g. for
                              development purposes).

                              For more information on cluster groups, you can refer to https://linuxcontainers.org/incus/docs/main/explanation/clustering/#cluster-groups
                            type: string
                        type: object
                    type: object
                  ovn:
                    description: |-
                      OVN will create a network load balancer.

                      The controller will automatically update the list of backends for the network load balancer as control plane nodes are added or removed from the cluster.

                      The cluster administrator is responsible to ensure that the OVN network is configured properly and that the LXCMachineTemplate objects have appropriate profiles to use the OVN network.

                      When using the "ovn" mode, the load balancer address must be set in `.spec.controlPlaneEndpoint.host` on the LXCCluster object.

                      Requires server extensions: `network_load_balancer`, `network_load_balancer_health_checks`
                    properties:
                      networkName:
                        description: NetworkName is the name of the network to create
                          the load balancer.
                        type: string
                    type: object
                type: object
              secretRef:
                description: SecretRef references a secret with credentials to access
                  the LXC (e.g. Incus, LXD) server.
                properties:
                  name:
                    description: Name is the name of the secret to use. The secret
                      must already exist in the same namespace as the parent object.
                    type: string
                required:
                - name
                type: object
              skipDefaultKubeadmProfile:
                description: |-
                  Do not apply the default kubeadm profile on container instances.

                  In this case, the cluster administrator is responsible to create the
                  profile manually and set the `.spec.template.spec.profiles` field of all
                  LXCMachineTemplate objects.

                  For more details on the default kubeadm profile that is applied, see
                  https://capn.linuxcontainers.org/reference/profile/kubeadm.html
                type: boolean
              unprivileged:
                description: |-
                  Unprivileged will launch unprivileged LXC containers for the cluster machines.

                  Known limitations apply for unprivileged LXC containers (e.g. cannot use NFS volumes).
                type: boolean
            required:
            - loadBalancer
            type: object
          status:
            description: LXCClusterStatus defines the observed state of LXCCluster.
            properties:
              conditions:
                description: Conditions defines current service state of the LXCCluster.
                items:
                  description: Condition defines an observation of a Cluster API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed. If that is not known, then using the time when
                        the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This field may be empty.
                      maxLength: 10240
                      minLength: 1
                      type: string
                    reason:
                      description: |-
                        reason is the reason for the condition's last transition in CamelCase.
                        The specific API may choose whether or not this field is considered a guaranteed API.
                        This field may be empty.
                      maxLength: 256
                      minLength: 1
                      type: string
                    severity:
                      description: |-
                        severity provides an explicit classification of Reason code, so the users or machines can immediately
                        understand the current situation and act accordingly.
                        The Severity field MUST be set only when Status=False.
                      maxLength: 32
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: |-
                        type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions
                        can be useful (see .node.status.conditions), the ability to deconflict is important.
                      maxLength: 256
                      minLength: 1
                      type: string
                  required:
                  - lastTransitionTime
                  - status
                  - type
                  type: object
                type: array
              ready:
                description: Ready denotes that the LXC cluster (infrastructure) is
                  ready.
                type: boolean
              v1beta2:
                description: V1Beta2 groups all status fields that will be added in
                  LXCCluster's status with the v1beta2 version.
                properties:
                  conditions:
                    description: |-
                      conditions represents the observations of a LXCCluster's current state.
                      Known condition types are Ready, LoadBalancerAvailable, Deleting, Paused.
                    items:
                      description: Condition contains details for one aspect of the
                        current state of this API Resource.
                      properties:
                        lastTransitionTime:
                          description: |-
                            lastTransitionTime is the last time the condition transitioned from one status to another.
                            This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                          format: date-time
                          type: string
                        message:
                          description: |-
                            message is a human readable message indicating details about the transition.
                            This may be an empty string.
                          maxLength: 32768
                          type: string
                        observedGeneration:
                          description: |-
                            observedGeneration represents the .metadata.generation that the condition was set based upon.
                            For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                            with respect to the current state of the instance.
                          format: int64
                          minimum: 0
                          type: integer
                        reason:
                          description: |-
                            reason contains a programmatic identifier indicating the reason for the condition's last transition.
                            Producers of specific condition types may define expected values and meanings for this field,
                            and whether the values are considered a guaranteed API.
                            The value should be a CamelCase string.
                            This field may not be empty.
                          maxLength: 1024
                          minLength: 1
                          pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                          type: string
                        status:
                          description: status of the condition, one of True, False,
                            Unknown.
                          enum:
                          - "True"
                          - "False"
                          - Unknown
                          type: string
                        type:
                          description: type of condition in CamelCase or in foo.example.com/CamelCase.
                          maxLength: 316
                          pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                          type: string
                      required:
                      - lastTransitionTime
                      - message
                      - reason
                      - status
                      - type
                      type: object
                    maxItems: 32
                    type: array
                    x-kubernetes-list-map-keys:
                    - type
                    x-kubernetes-list-type: map
                type: object
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
